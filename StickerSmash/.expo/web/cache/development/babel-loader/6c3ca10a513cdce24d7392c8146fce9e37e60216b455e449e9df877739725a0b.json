{"ast":null,"code":"import View from \"react-native-web/dist/exports/View\";\nimport { Gesture, GestureDetector } from \"react-native-gesture-handler\";\nimport { Animated, useAnimatedStyle, useSharedValue, withSpring } from \"react-native-reanimated\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function EmojiSticker(_ref) {\n  var imageSize = _ref.imageSize,\n    stickerSource = _ref.stickerSource;\n  var scaleImage = useSharedValue(imageSize);\n  var doubleTap = Gesture.Tap().numberOfTaps(2).onStart(function () {\n    if (scaleImage.value !== imageSize * 2) {\n      scaleImage.value = scaleImage.value * 2;\n    }\n  });\n  var imageStyle = useAnimatedStyle(function () {\n    return {\n      width: withSpring(scaleImage.value),\n      height: withSpring(scaleImage.value)\n    };\n  });\n  return _jsx(View, {\n    style: {\n      top: -350\n    },\n    children: _jsx(GestureDetector, {\n      gesture: doubleTap,\n      children: _jsx(Animated.Image, {\n        source: stickerSource,\n        resizeMode: \"contain\",\n        style: [imageStyle, {\n          width: imageSize,\n          height: imageSize\n        }]\n      })\n    })\n  });\n}","map":{"version":3,"names":["Gesture","GestureDetector","Animated","useAnimatedStyle","useSharedValue","withSpring","jsx","_jsx","EmojiSticker","_ref","imageSize","stickerSource","scaleImage","doubleTap","Tap","numberOfTaps","onStart","value","imageStyle","width","height","View","style","top","children","gesture","Image","source","resizeMode"],"sources":["/Users/xd/Desktop/study/react/react-project/StickerSmash/components/EmojiSticker.js"],"sourcesContent":["import { View } from \"react-native-web\"\nimport { Gesture, GestureDetector } from \"react-native-gesture-handler\";\nimport { Animated, useAnimatedStyle, useSharedValue, withSpring } from \"react-native-reanimated\";\n\nexport default function EmojiSticker({imageSize, stickerSource}) {\n    const scaleImage = useSharedValue(imageSize);\n    const doubleTap = Gesture.Tap().numberOfTaps(2).onStart(() => {\n        if (scaleImage.value !== imageSize * 2) {\n            scaleImage.value = scaleImage.value * 2;\n        }\n    });\n    const imageStyle = useAnimatedStyle(() => {\n        return {\n            width: withSpring(scaleImage.value),\n            height: withSpring(scaleImage.value),\n        }\n    });\n    return (\n        <View style={{top: -350}}>\n            <GestureDetector gesture={doubleTap}>\n                <Animated.Image source={stickerSource}\n                    resizeMode=\"contain\"\n                    style={[imageStyle, {width: imageSize, height:imageSize}]}/>\n            </GestureDetector>\n        </View>\n    );\n}"],"mappings":";AACA,SAASA,OAAO,EAAEC,eAAe,QAAQ,8BAA8B;AACvE,SAASC,QAAQ,EAAEC,gBAAgB,EAAEC,cAAc,EAAEC,UAAU,QAAQ,yBAAyB;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAEjG,eAAe,SAASC,YAAYA,CAAAC,IAAA,EAA6B;EAAA,IAA3BC,SAAS,GAAAD,IAAA,CAATC,SAAS;IAAEC,aAAa,GAAAF,IAAA,CAAbE,aAAa;EAC1D,IAAMC,UAAU,GAAGR,cAAc,CAACM,SAAS,CAAC;EAC5C,IAAMG,SAAS,GAAGb,OAAO,CAACc,GAAG,CAAC,CAAC,CAACC,YAAY,CAAC,CAAC,CAAC,CAACC,OAAO,CAAC,YAAM;IAC1D,IAAIJ,UAAU,CAACK,KAAK,KAAKP,SAAS,GAAG,CAAC,EAAE;MACpCE,UAAU,CAACK,KAAK,GAAGL,UAAU,CAACK,KAAK,GAAG,CAAC;IAC3C;EACJ,CAAC,CAAC;EACF,IAAMC,UAAU,GAAGf,gBAAgB,CAAC,YAAM;IACtC,OAAO;MACHgB,KAAK,EAAEd,UAAU,CAACO,UAAU,CAACK,KAAK,CAAC;MACnCG,MAAM,EAAEf,UAAU,CAACO,UAAU,CAACK,KAAK;IACvC,CAAC;EACL,CAAC,CAAC;EACF,OACIV,IAAA,CAACc,IAAI;IAACC,KAAK,EAAE;MAACC,GAAG,EAAE,CAAC;IAAG,CAAE;IAAAC,QAAA,EACrBjB,IAAA,CAACN,eAAe;MAACwB,OAAO,EAAEZ,SAAU;MAAAW,QAAA,EAChCjB,IAAA,CAACL,QAAQ,CAACwB,KAAK;QAACC,MAAM,EAAEhB,aAAc;QAClCiB,UAAU,EAAC,SAAS;QACpBN,KAAK,EAAE,CAACJ,UAAU,EAAE;UAACC,KAAK,EAAET,SAAS;UAAEU,MAAM,EAACV;QAAS,CAAC;MAAE,CAAC;IAAC,CACnD;EAAC,CAChB,CAAC;AAEf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _createForOfIteratorHelperLoose(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (t) return (t = t.call(r)).next.bind(t); if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var o = 0; return function () { return o >= r.length ? { done: !0 } : { done: !1, value: r[o++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nvar _Reanimated$default$c, _Reanimated$default;\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport { BaseGesture, CALLBACK_TYPE } from \"./gesture\";\nimport { Reanimated } from \"./reanimatedWrapper\";\nimport { registerHandler, unregisterHandler } from \"../handlersRegistry\";\nimport RNGestureHandlerModule from \"../../RNGestureHandlerModule\";\nimport { baseGestureHandlerWithMonitorProps, filterConfig, findNodeHandle, scheduleFlushOperations } from \"../gestureHandlerCommon\";\nimport { GestureStateManager } from \"./gestureStateManager\";\nimport { flingGestureHandlerProps } from \"../FlingGestureHandler\";\nimport { forceTouchGestureHandlerProps } from \"../ForceTouchGestureHandler\";\nimport { longPressGestureHandlerProps } from \"../LongPressGestureHandler\";\nimport { panGestureHandlerProps, panGestureHandlerCustomNativeProps } from \"../PanGestureHandler\";\nimport { tapGestureHandlerProps } from \"../TapGestureHandler\";\nimport { hoverGestureHandlerProps } from \"./hoverGesture\";\nimport { State } from \"../../State\";\nimport { TouchEventType } from \"../../TouchEventType\";\nimport { ActionType } from \"../../ActionType\";\nimport { isFabric, isJestEnv, tagMessage } from \"../../utils\";\nimport { getReactNativeVersion } from \"../../getReactNativeVersion\";\nimport { getShadowNodeFromRef } from \"../../getShadowNodeFromRef\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { onGestureHandlerEvent as _onGestureHandlerEvent } from \"./eventReceiver\";\nimport { RNRenderer } from \"../../RNRenderer\";\nimport { isNewWebImplementationEnabled } from \"../../EnableNewWebImplementation\";\nimport { nativeViewGestureHandlerProps } from \"../NativeViewGestureHandler\";\nimport GestureHandlerRootViewContext from \"../../GestureHandlerRootViewContext\";\nimport { ghQueueMicrotask } from \"../../ghQueueMicrotask\";\nvar ALLOWED_PROPS = [].concat(_toConsumableArray(baseGestureHandlerWithMonitorProps), _toConsumableArray(tapGestureHandlerProps), _toConsumableArray(panGestureHandlerProps), _toConsumableArray(panGestureHandlerCustomNativeProps), _toConsumableArray(longPressGestureHandlerProps), _toConsumableArray(forceTouchGestureHandlerProps), _toConsumableArray(flingGestureHandlerProps), _toConsumableArray(hoverGestureHandlerProps), _toConsumableArray(nativeViewGestureHandlerProps));\nfunction convertToHandlerTag(ref) {\n  if (typeof ref === 'number') {\n    return ref;\n  } else if (ref instanceof BaseGesture) {\n    return ref.handlerTag;\n  } else {\n    var _ref$current$handlerT, _ref$current;\n    return (_ref$current$handlerT = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.handlerTag) !== null && _ref$current$handlerT !== void 0 ? _ref$current$handlerT : -1;\n  }\n}\nfunction extractValidHandlerTags(interactionGroup) {\n  var _interactionGroup$map, _interactionGroup$map2;\n  return (_interactionGroup$map = interactionGroup === null || interactionGroup === void 0 ? void 0 : (_interactionGroup$map2 = interactionGroup.map(convertToHandlerTag)) === null || _interactionGroup$map2 === void 0 ? void 0 : _interactionGroup$map2.filter(function (tag) {\n    return tag > 0;\n  })) !== null && _interactionGroup$map !== void 0 ? _interactionGroup$map : [];\n}\nfunction dropHandlers(preparedGesture) {\n  for (var _iterator = _createForOfIteratorHelperLoose(preparedGesture.config), _step; !(_step = _iterator()).done;) {\n    var handler = _step.value;\n    RNGestureHandlerModule.dropGestureHandler(handler.handlerTag);\n    unregisterHandler(handler.handlerTag, handler.config.testId);\n  }\n  scheduleFlushOperations();\n}\nfunction checkGestureCallbacksForWorklets(gesture) {\n  if (gesture.config.runOnJS) {\n    return;\n  }\n  var areSomeNotWorklets = gesture.handlers.isWorklet.includes(false);\n  var areSomeWorklets = gesture.handlers.isWorklet.includes(true);\n  if (areSomeNotWorklets && areSomeWorklets) {\n    console.error(tagMessage(\"Some of the callbacks in the gesture are worklets and some are not. Either make sure that all calbacks are marked as 'worklet' if you wish to run them on the UI thread or use '.runOnJS(true)' modifier on the gesture explicitly to run all callbacks on the JS thread.\"));\n  }\n}\nfunction attachHandlers(_ref) {\n  var preparedGesture = _ref.preparedGesture,\n    gestureConfig = _ref.gestureConfig,\n    gesture = _ref.gesture,\n    viewTag = _ref.viewTag,\n    webEventHandlersRef = _ref.webEventHandlersRef,\n    mountedRef = _ref.mountedRef;\n  if (!preparedGesture.firstExecution) {\n    gestureConfig.initialize();\n  } else {\n    preparedGesture.firstExecution = false;\n  }\n  ghQueueMicrotask(function () {\n    if (!mountedRef.current) {\n      return;\n    }\n    gestureConfig.prepare();\n  });\n  for (var _iterator2 = _createForOfIteratorHelperLoose(gesture), _step2; !(_step2 = _iterator2()).done;) {\n    var handler = _step2.value;\n    checkGestureCallbacksForWorklets(handler);\n    RNGestureHandlerModule.createGestureHandler(handler.handlerName, handler.handlerTag, filterConfig(handler.config, ALLOWED_PROPS));\n    registerHandler(handler.handlerTag, handler, handler.config.testId);\n  }\n  ghQueueMicrotask(function () {\n    if (!mountedRef.current) {\n      return;\n    }\n    for (var _iterator3 = _createForOfIteratorHelperLoose(gesture), _step3; !(_step3 = _iterator3()).done;) {\n      var handler = _step3.value;\n      var requireToFail = [];\n      if (handler.config.requireToFail) {\n        requireToFail = extractValidHandlerTags(handler.config.requireToFail);\n      }\n      var simultaneousWith = [];\n      if (handler.config.simultaneousWith) {\n        simultaneousWith = extractValidHandlerTags(handler.config.simultaneousWith);\n      }\n      var blocksHandlers = [];\n      if (handler.config.blocksHandlers) {\n        blocksHandlers = extractValidHandlerTags(handler.config.blocksHandlers);\n      }\n      RNGestureHandlerModule.updateGestureHandler(handler.handlerTag, filterConfig(handler.config, ALLOWED_PROPS, {\n        simultaneousHandlers: simultaneousWith,\n        waitFor: requireToFail,\n        blocksHandlers: blocksHandlers\n      }));\n    }\n    scheduleFlushOperations();\n  });\n  preparedGesture.config = gesture;\n  for (var _iterator4 = _createForOfIteratorHelperLoose(preparedGesture.config), _step4; !(_step4 = _iterator4()).done;) {\n    var _gesture = _step4.value;\n    var actionType = _gesture.shouldUseReanimated ? ActionType.REANIMATED_WORKLET : ActionType.JS_FUNCTION_NEW_API;\n    if (Platform.OS === 'web') {\n      RNGestureHandlerModule.attachGestureHandler(_gesture.handlerTag, viewTag, ActionType.JS_FUNCTION_OLD_API, webEventHandlersRef);\n    } else {\n      RNGestureHandlerModule.attachGestureHandler(_gesture.handlerTag, viewTag, actionType);\n    }\n  }\n  if (preparedGesture.animatedHandlers) {\n    var isAnimatedGesture = function isAnimatedGesture(g) {\n      return g.shouldUseReanimated;\n    };\n    preparedGesture.animatedHandlers.value = gesture.filter(isAnimatedGesture).map(function (g) {\n      return g.handlers;\n    });\n  }\n}\nfunction updateHandlers(preparedGesture, gestureConfig, gesture, mountedRef) {\n  gestureConfig.prepare();\n  for (var i = 0; i < gesture.length; i++) {\n    var handler = preparedGesture.config[i];\n    checkGestureCallbacksForWorklets(handler);\n    if (gesture[i].handlerTag !== handler.handlerTag) {\n      gesture[i].handlerTag = handler.handlerTag;\n      gesture[i].handlers.handlerTag = handler.handlerTag;\n    }\n  }\n  ghQueueMicrotask(function () {\n    if (!mountedRef.current) {\n      return;\n    }\n    for (var _i = 0; _i < gesture.length; _i++) {\n      var _handler = preparedGesture.config[_i];\n      _handler.config = gesture[_i].config;\n      _handler.handlers = gesture[_i].handlers;\n      var requireToFail = extractValidHandlerTags(_handler.config.requireToFail);\n      var simultaneousWith = extractValidHandlerTags(_handler.config.simultaneousWith);\n      RNGestureHandlerModule.updateGestureHandler(_handler.handlerTag, filterConfig(_handler.config, ALLOWED_PROPS, {\n        simultaneousHandlers: simultaneousWith,\n        waitFor: requireToFail\n      }));\n      registerHandler(_handler.handlerTag, _handler, _handler.config.testId);\n    }\n    if (preparedGesture.animatedHandlers) {\n      var _preparedGesture$anim;\n      var previousHandlersValue = (_preparedGesture$anim = preparedGesture.animatedHandlers.value) !== null && _preparedGesture$anim !== void 0 ? _preparedGesture$anim : [];\n      var newHandlersValue = preparedGesture.config.filter(function (g) {\n        return g.shouldUseReanimated;\n      }).map(function (g) {\n        return g.handlers;\n      });\n      var shouldUpdateSharedValue = previousHandlersValue.length !== newHandlersValue.length;\n      if (!shouldUpdateSharedValue) {\n        for (var _i2 = 0; _i2 < newHandlersValue.length; _i2++) {\n          if (newHandlersValue[_i2].gestureId !== previousHandlersValue[_i2].gestureId) {\n            shouldUpdateSharedValue = true;\n            break;\n          }\n        }\n      }\n      if (shouldUpdateSharedValue) {\n        preparedGesture.animatedHandlers.value = newHandlersValue;\n      }\n    }\n    scheduleFlushOperations();\n  });\n}\nfunction needsToReattach(preparedGesture, gesture) {\n  if (gesture.length !== preparedGesture.config.length) {\n    return true;\n  }\n  for (var i = 0; i < gesture.length; i++) {\n    if (gesture[i].handlerName !== preparedGesture.config[i].handlerName || gesture[i].shouldUseReanimated !== preparedGesture.config[i].shouldUseReanimated) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction isStateChangeEvent(event) {\n  'worklet';\n  return event.oldState != null;\n}\nfunction isTouchEvent(event) {\n  'worklet';\n\n  return event.eventType != null;\n}\nfunction getHandler(type, gesture) {\n  'worklet';\n\n  switch (type) {\n    case CALLBACK_TYPE.BEGAN:\n      return gesture.onBegin;\n    case CALLBACK_TYPE.START:\n      return gesture.onStart;\n    case CALLBACK_TYPE.UPDATE:\n      return gesture.onUpdate;\n    case CALLBACK_TYPE.CHANGE:\n      return gesture.onChange;\n    case CALLBACK_TYPE.END:\n      return gesture.onEnd;\n    case CALLBACK_TYPE.FINALIZE:\n      return gesture.onFinalize;\n    case CALLBACK_TYPE.TOUCHES_DOWN:\n      return gesture.onTouchesDown;\n    case CALLBACK_TYPE.TOUCHES_MOVE:\n      return gesture.onTouchesMove;\n    case CALLBACK_TYPE.TOUCHES_UP:\n      return gesture.onTouchesUp;\n    case CALLBACK_TYPE.TOUCHES_CANCELLED:\n      return gesture.onTouchesCancelled;\n  }\n}\nfunction touchEventTypeToCallbackType(eventType) {\n  'worklet';\n\n  switch (eventType) {\n    case TouchEventType.TOUCHES_DOWN:\n      return CALLBACK_TYPE.TOUCHES_DOWN;\n    case TouchEventType.TOUCHES_MOVE:\n      return CALLBACK_TYPE.TOUCHES_MOVE;\n    case TouchEventType.TOUCHES_UP:\n      return CALLBACK_TYPE.TOUCHES_UP;\n    case TouchEventType.TOUCHES_CANCELLED:\n      return CALLBACK_TYPE.TOUCHES_CANCELLED;\n  }\n  return CALLBACK_TYPE.UNDEFINED;\n}\nfunction runWorklet(type, gesture, event) {\n  'worklet';\n\n  var handler = getHandler(type, gesture);\n  if (gesture.isWorklet[type]) {\n    for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n      args[_key - 3] = arguments[_key];\n    }\n    handler === null || handler === void 0 ? void 0 : handler.apply(void 0, [event].concat(args));\n  } else if (handler) {\n    console.warn(tagMessage('Animated gesture callback must be a worklet'));\n  }\n}\nfunction useAnimatedGesture(preparedGesture, needsRebuild) {\n  if (!Reanimated) {\n    return;\n  }\n  var sharedHandlersCallbacks = Reanimated.useSharedValue(null);\n  var lastUpdateEvent = Reanimated.useSharedValue([]);\n  var stateControllers = [];\n  var callback = function callback(event) {\n    'worklet';\n\n    var currentCallback = sharedHandlersCallbacks.value;\n    if (!currentCallback) {\n      return;\n    }\n    for (var i = 0; i < currentCallback.length; i++) {\n      var gesture = currentCallback[i];\n      if (event.handlerTag === gesture.handlerTag) {\n        if (isStateChangeEvent(event)) {\n          if (event.oldState === State.UNDETERMINED && event.state === State.BEGAN) {\n            runWorklet(CALLBACK_TYPE.BEGAN, gesture, event);\n          } else if ((event.oldState === State.BEGAN || event.oldState === State.UNDETERMINED) && event.state === State.ACTIVE) {\n            runWorklet(CALLBACK_TYPE.START, gesture, event);\n            lastUpdateEvent.value[gesture.handlerTag] = undefined;\n          } else if (event.oldState !== event.state && event.state === State.END) {\n            if (event.oldState === State.ACTIVE) {\n              runWorklet(CALLBACK_TYPE.END, gesture, event, true);\n            }\n            runWorklet(CALLBACK_TYPE.FINALIZE, gesture, event, true);\n          } else if ((event.state === State.FAILED || event.state === State.CANCELLED) && event.state !== event.oldState) {\n            if (event.oldState === State.ACTIVE) {\n              runWorklet(CALLBACK_TYPE.END, gesture, event, false);\n            }\n            runWorklet(CALLBACK_TYPE.FINALIZE, gesture, event, false);\n          }\n        } else if (isTouchEvent(event)) {\n          if (!stateControllers[i]) {\n            stateControllers[i] = GestureStateManager.create(event.handlerTag);\n          }\n          if (event.eventType !== TouchEventType.UNDETERMINED) {\n            runWorklet(touchEventTypeToCallbackType(event.eventType), gesture, event, stateControllers[i]);\n          }\n        } else {\n          runWorklet(CALLBACK_TYPE.UPDATE, gesture, event);\n          if (gesture.onChange && gesture.changeEventCalculator) {\n            var _gesture$changeEventC;\n            runWorklet(CALLBACK_TYPE.CHANGE, gesture, (_gesture$changeEventC = gesture.changeEventCalculator) === null || _gesture$changeEventC === void 0 ? void 0 : _gesture$changeEventC.call(gesture, event, lastUpdateEvent.value[gesture.handlerTag]));\n            lastUpdateEvent.value[gesture.handlerTag] = event;\n          }\n        }\n      }\n    }\n  };\n  var event = Reanimated.useEvent(callback, ['onGestureHandlerStateChange', 'onGestureHandlerEvent'], needsRebuild);\n  preparedGesture.animatedEventHandler = event;\n  preparedGesture.animatedHandlers = sharedHandlersCallbacks;\n}\nfunction validateDetectorChildren(ref) {\n  if (__DEV__ && Platform.OS !== 'web') {\n    var REACT_NATIVE_VERSION = getReactNativeVersion();\n    var wrapType = REACT_NATIVE_VERSION.minor > 63 || REACT_NATIVE_VERSION.major > 0 ? ref._reactInternals.elementType : ref._reactInternalFiber.elementType;\n    var instance = RNRenderer.findHostInstance_DEPRECATED(ref)._internalFiberInstanceHandleDEV;\n    while (instance && instance.elementType !== wrapType) {\n      if (instance.sibling) {\n        throw new Error('GestureDetector has more than one native view as its children. This can happen if you are using a custom component that renders multiple views, like React.Fragment. You should wrap content of GestureDetector with a <View> or <Animated.View>.');\n      }\n      instance = instance.return;\n    }\n  }\n}\nvar applyUserSelectProp = function applyUserSelectProp(userSelect, gesture) {\n  for (var _iterator5 = _createForOfIteratorHelperLoose(gesture.toGestureArray()), _step5; !(_step5 = _iterator5()).done;) {\n    var g = _step5.value;\n    g.config.userSelect = userSelect;\n  }\n};\nvar applyEnableContextMenuProp = function applyEnableContextMenuProp(enableContextMenu, gesture) {\n  for (var _iterator6 = _createForOfIteratorHelperLoose(gesture.toGestureArray()), _step6; !(_step6 = _iterator6()).done;) {\n    var g = _step6.value;\n    g.config.enableContextMenu = enableContextMenu;\n  }\n};\nvar applyTouchActionProp = function applyTouchActionProp(touchAction, gesture) {\n  for (var _iterator7 = _createForOfIteratorHelperLoose(gesture.toGestureArray()), _step7; !(_step7 = _iterator7()).done;) {\n    var g = _step7.value;\n    g.config.touchAction = touchAction;\n  }\n};\nexport var GestureDetector = function GestureDetector(props) {\n  var rootViewContext = useContext(GestureHandlerRootViewContext);\n  if (__DEV__ && !rootViewContext && !isJestEnv() && Platform.OS !== 'web') {\n    throw new Error('GestureDetector must be used as a descendant of GestureHandlerRootView. Otherwise the gestures will not be recognized. See https://docs.swmansion.com/react-native-gesture-handler/docs/installation for more details.');\n  }\n  var gestureConfig = props.gesture;\n  if (props.userSelect) {\n    applyUserSelectProp(props.userSelect, gestureConfig);\n  }\n  if (props.enableContextMenu !== undefined) {\n    applyEnableContextMenuProp(props.enableContextMenu, gestureConfig);\n  }\n  if (props.touchAction !== undefined) {\n    applyTouchActionProp(props.touchAction, gestureConfig);\n  }\n  var gesture = gestureConfig.toGestureArray();\n  var useReanimatedHook = gesture.some(function (g) {\n    return g.shouldUseReanimated;\n  });\n  var state = useRef({\n    firstRender: true,\n    viewRef: null,\n    previousViewTag: -1,\n    forceReattach: false\n  }).current;\n  var mountedRef = useRef(false);\n  var webEventHandlersRef = useRef({\n    onGestureHandlerEvent: function onGestureHandlerEvent(e) {\n      _onGestureHandlerEvent(e.nativeEvent);\n    },\n    onGestureHandlerStateChange: isNewWebImplementationEnabled() ? function (e) {\n      _onGestureHandlerEvent(e.nativeEvent);\n    } : undefined\n  });\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    renderState = _useState2[0],\n    setRenderState = _useState2[1];\n  function forceRender() {\n    setRenderState(!renderState);\n  }\n  var preparedGesture = React.useRef({\n    config: gesture,\n    animatedEventHandler: null,\n    animatedHandlers: null,\n    firstExecution: true,\n    useReanimatedHook: useReanimatedHook\n  }).current;\n  if (useReanimatedHook !== preparedGesture.useReanimatedHook) {\n    throw new Error(tagMessage('You cannot change the thread the callbacks are ran on while the app is running'));\n  }\n  function onHandlersUpdate(skipConfigUpdate) {\n    var viewTag = findNodeHandle(state.viewRef);\n    var forceReattach = viewTag !== state.previousViewTag;\n    if (forceReattach || needsToReattach(preparedGesture, gesture)) {\n      validateDetectorChildren(state.viewRef);\n      dropHandlers(preparedGesture);\n      attachHandlers({\n        preparedGesture: preparedGesture,\n        gestureConfig: gestureConfig,\n        gesture: gesture,\n        webEventHandlersRef: webEventHandlersRef,\n        viewTag: viewTag,\n        mountedRef: mountedRef\n      });\n      state.previousViewTag = viewTag;\n      state.forceReattach = forceReattach;\n      if (forceReattach) {\n        forceRender();\n      }\n    } else if (!skipConfigUpdate) {\n      updateHandlers(preparedGesture, gestureConfig, gesture, mountedRef);\n    }\n  }\n  var needsToRebuildReanimatedEvent = preparedGesture.firstExecution || needsToReattach(preparedGesture, gesture) || state.forceReattach;\n  state.forceReattach = false;\n  if (preparedGesture.firstExecution) {\n    gestureConfig.initialize();\n  }\n  if (useReanimatedHook) {\n    useAnimatedGesture(preparedGesture, needsToRebuildReanimatedEvent);\n  }\n  useEffect(function () {\n    var viewTag = findNodeHandle(state.viewRef);\n    state.firstRender = true;\n    mountedRef.current = true;\n    validateDetectorChildren(state.viewRef);\n    attachHandlers({\n      preparedGesture: preparedGesture,\n      gestureConfig: gestureConfig,\n      gesture: gesture,\n      webEventHandlersRef: webEventHandlersRef,\n      viewTag: viewTag,\n      mountedRef: mountedRef\n    });\n    return function () {\n      mountedRef.current = false;\n      dropHandlers(preparedGesture);\n    };\n  }, []);\n  useEffect(function () {\n    if (!state.firstRender) {\n      onHandlersUpdate();\n    } else {\n      state.firstRender = false;\n    }\n  }, [props]);\n  var refFunction = function refFunction(ref) {\n    if (ref !== null) {\n      state.viewRef = ref;\n      if (state.previousViewTag === -1) {\n        state.previousViewTag = findNodeHandle(state.viewRef);\n      }\n      onHandlersUpdate(true);\n      if (isFabric() && global.isFormsStackingContext) {\n        var node = getShadowNodeFromRef(ref);\n        if (global.isFormsStackingContext(node) === false) {\n          console.error(tagMessage('GestureDetector has received a child that may get view-flattened. ' + '\\nTo prevent it from misbehaving you need to wrap the child with a `<View collapsable={false}>`.'));\n        }\n      }\n    }\n  };\n  if (useReanimatedHook) {\n    return React.createElement(AnimatedWrap, {\n      ref: refFunction,\n      onGestureHandlerEvent: preparedGesture.animatedEventHandler\n    }, props.children);\n  } else {\n    return React.createElement(Wrap, {\n      ref: refFunction\n    }, props.children);\n  }\n};\nvar Wrap = function (_React$Component) {\n  function Wrap() {\n    _classCallCheck(this, Wrap);\n    return _callSuper(this, Wrap, arguments);\n  }\n  _inherits(Wrap, _React$Component);\n  return _createClass(Wrap, [{\n    key: \"render\",\n    value: function render() {\n      try {\n        var child = React.Children.only(this.props.children);\n        return React.cloneElement(child, {\n          collapsable: false\n        }, child.props.children);\n      } catch (e) {\n        throw new Error(tagMessage(\"GestureDetector got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.\"));\n      }\n    }\n  }]);\n}(React.Component);\nvar AnimatedWrap = (_Reanimated$default$c = Reanimated === null || Reanimated === void 0 ? void 0 : (_Reanimated$default = Reanimated.default) === null || _Reanimated$default === void 0 ? void 0 : _Reanimated$default.createAnimatedComponent(Wrap)) !== null && _Reanimated$default$c !== void 0 ? _Reanimated$default$c : Wrap;","map":{"version":3,"names":["React","useContext","useEffect","useRef","useState","BaseGesture","CALLBACK_TYPE","Reanimated","registerHandler","unregisterHandler","RNGestureHandlerModule","baseGestureHandlerWithMonitorProps","filterConfig","findNodeHandle","scheduleFlushOperations","GestureStateManager","flingGestureHandlerProps","forceTouchGestureHandlerProps","longPressGestureHandlerProps","panGestureHandlerProps","panGestureHandlerCustomNativeProps","tapGestureHandlerProps","hoverGestureHandlerProps","State","TouchEventType","ActionType","isFabric","isJestEnv","tagMessage","getReactNativeVersion","getShadowNodeFromRef","Platform","onGestureHandlerEvent","RNRenderer","isNewWebImplementationEnabled","nativeViewGestureHandlerProps","GestureHandlerRootViewContext","ghQueueMicrotask","ALLOWED_PROPS","concat","_toConsumableArray","convertToHandlerTag","ref","handlerTag","_ref$current$handlerT","_ref$current","current","extractValidHandlerTags","interactionGroup","_interactionGroup$map","_interactionGroup$map2","map","filter","tag","dropHandlers","preparedGesture","_iterator","_createForOfIteratorHelperLoose","config","_step","done","handler","value","dropGestureHandler","testId","checkGestureCallbacksForWorklets","gesture","runOnJS","areSomeNotWorklets","handlers","isWorklet","includes","areSomeWorklets","console","error","attachHandlers","_ref","gestureConfig","viewTag","webEventHandlersRef","mountedRef","firstExecution","initialize","prepare","_iterator2","_step2","createGestureHandler","handlerName","_iterator3","_step3","requireToFail","simultaneousWith","blocksHandlers","updateGestureHandler","simultaneousHandlers","waitFor","_iterator4","_step4","actionType","shouldUseReanimated","REANIMATED_WORKLET","JS_FUNCTION_NEW_API","OS","attachGestureHandler","JS_FUNCTION_OLD_API","animatedHandlers","isAnimatedGesture","g","updateHandlers","i","length","_preparedGesture$anim","previousHandlersValue","newHandlersValue","shouldUpdateSharedValue","gestureId","needsToReattach","isStateChangeEvent","event","oldState","isTouchEvent","eventType","getHandler","type","BEGAN","onBegin","START","onStart","UPDATE","onUpdate","CHANGE","onChange","END","onEnd","FINALIZE","onFinalize","TOUCHES_DOWN","onTouchesDown","TOUCHES_MOVE","onTouchesMove","TOUCHES_UP","onTouchesUp","TOUCHES_CANCELLED","onTouchesCancelled","touchEventTypeToCallbackType","UNDEFINED","runWorklet","_len","arguments","args","Array","_key","apply","warn","useAnimatedGesture","needsRebuild","sharedHandlersCallbacks","useSharedValue","lastUpdateEvent","stateControllers","callback","currentCallback","UNDETERMINED","state","ACTIVE","undefined","FAILED","CANCELLED","create","changeEventCalculator","_gesture$changeEventC","call","useEvent","animatedEventHandler","validateDetectorChildren","__DEV__","REACT_NATIVE_VERSION","wrapType","minor","major","_reactInternals","elementType","_reactInternalFiber","instance","findHostInstance_DEPRECATED","_internalFiberInstanceHandleDEV","sibling","Error","return","applyUserSelectProp","userSelect","_iterator5","toGestureArray","_step5","applyEnableContextMenuProp","enableContextMenu","_iterator6","_step6","applyTouchActionProp","touchAction","_iterator7","_step7","GestureDetector","props","rootViewContext","useReanimatedHook","some","firstRender","viewRef","previousViewTag","forceReattach","e","nativeEvent","onGestureHandlerStateChange","_useState","_useState2","_slicedToArray","renderState","setRenderState","forceRender","onHandlersUpdate","skipConfigUpdate","needsToRebuildReanimatedEvent","refFunction","global","isFormsStackingContext","node","createElement","AnimatedWrap","children","Wrap","_React$Component","_classCallCheck","_callSuper","_inherits","_createClass","key","render","child","Children","only","cloneElement","collapsable","Component","_Reanimated$default$c","_Reanimated$default","default","createAnimatedComponent"],"sources":["/Users/xd/Desktop/study/react/react-project/StickerSmash/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/GestureDetector.tsx"],"sourcesContent":["import React, { useContext, useEffect, useRef, useState } from 'react';\nimport {\n  GestureType,\n  HandlerCallbacks,\n  BaseGesture,\n  GestureRef,\n  CALLBACK_TYPE,\n} from './gesture';\nimport { Reanimated, SharedValue } from './reanimatedWrapper';\nimport { registerHandler, unregisterHandler } from '../handlersRegistry';\nimport RNGestureHandlerModule from '../../RNGestureHandlerModule';\nimport {\n  baseGestureHandlerWithMonitorProps,\n  filterConfig,\n  findNodeHandle,\n  GestureTouchEvent,\n  GestureUpdateEvent,\n  GestureStateChangeEvent,\n  HandlerStateChangeEvent,\n  scheduleFlushOperations,\n  UserSelect,\n  TouchAction,\n} from '../gestureHandlerCommon';\nimport {\n  GestureStateManager,\n  GestureStateManagerType,\n} from './gestureStateManager';\nimport { flingGestureHandlerProps } from '../FlingGestureHandler';\nimport { forceTouchGestureHandlerProps } from '../ForceTouchGestureHandler';\nimport { longPressGestureHandlerProps } from '../LongPressGestureHandler';\nimport {\n  panGestureHandlerProps,\n  panGestureHandlerCustomNativeProps,\n} from '../PanGestureHandler';\nimport { tapGestureHandlerProps } from '../TapGestureHandler';\nimport { hoverGestureHandlerProps } from './hoverGesture';\nimport { State } from '../../State';\nimport { TouchEventType } from '../../TouchEventType';\nimport { ComposedGesture } from './gestureComposition';\nimport { ActionType } from '../../ActionType';\nimport { isFabric, isJestEnv, tagMessage } from '../../utils';\nimport { getReactNativeVersion } from '../../getReactNativeVersion';\nimport { getShadowNodeFromRef } from '../../getShadowNodeFromRef';\nimport { Platform } from 'react-native';\nimport type RNGestureHandlerModuleWeb from '../../RNGestureHandlerModule.web';\nimport { onGestureHandlerEvent } from './eventReceiver';\nimport { RNRenderer } from '../../RNRenderer';\nimport { isNewWebImplementationEnabled } from '../../EnableNewWebImplementation';\nimport { nativeViewGestureHandlerProps } from '../NativeViewGestureHandler';\nimport GestureHandlerRootViewContext from '../../GestureHandlerRootViewContext';\nimport { ghQueueMicrotask } from '../../ghQueueMicrotask';\n\ndeclare const global: {\n  isFormsStackingContext: (node: unknown) => boolean | null; // JSI function\n};\n\nconst ALLOWED_PROPS = [\n  ...baseGestureHandlerWithMonitorProps,\n  ...tapGestureHandlerProps,\n  ...panGestureHandlerProps,\n  ...panGestureHandlerCustomNativeProps,\n  ...longPressGestureHandlerProps,\n  ...forceTouchGestureHandlerProps,\n  ...flingGestureHandlerProps,\n  ...hoverGestureHandlerProps,\n  ...nativeViewGestureHandlerProps,\n];\n\nexport type GestureConfigReference = {\n  config: GestureType[];\n  animatedEventHandler: unknown;\n  animatedHandlers: SharedValue<\n    HandlerCallbacks<Record<string, unknown>>[] | null\n  > | null;\n  firstExecution: boolean;\n  useReanimatedHook: boolean;\n};\n\nfunction convertToHandlerTag(ref: GestureRef): number {\n  if (typeof ref === 'number') {\n    return ref;\n  } else if (ref instanceof BaseGesture) {\n    return ref.handlerTag;\n  } else {\n    // @ts-ignore in this case it should be a ref either to gesture object or\n    // a gesture handler component, in both cases handlerTag property exists\n    return ref.current?.handlerTag ?? -1;\n  }\n}\n\nfunction extractValidHandlerTags(interactionGroup: GestureRef[] | undefined) {\n  return (\n    interactionGroup?.map(convertToHandlerTag)?.filter((tag) => tag > 0) ?? []\n  );\n}\n\nfunction dropHandlers(preparedGesture: GestureConfigReference) {\n  for (const handler of preparedGesture.config) {\n    RNGestureHandlerModule.dropGestureHandler(handler.handlerTag);\n\n    unregisterHandler(handler.handlerTag, handler.config.testId);\n  }\n\n  scheduleFlushOperations();\n}\n\nfunction checkGestureCallbacksForWorklets(gesture: GestureType) {\n  // if a gesture is explicitly marked to run on the JS thread there is no need to check\n  // if callbacks are worklets as the user is aware they will be ran on the JS thread\n  if (gesture.config.runOnJS) {\n    return;\n  }\n\n  const areSomeNotWorklets = gesture.handlers.isWorklet.includes(false);\n  const areSomeWorklets = gesture.handlers.isWorklet.includes(true);\n\n  // if some of the callbacks are worklets and some are not, and the gesture is not\n  // explicitly marked with `.runOnJS(true)` show an error\n  if (areSomeNotWorklets && areSomeWorklets) {\n    console.error(\n      tagMessage(\n        `Some of the callbacks in the gesture are worklets and some are not. Either make sure that all calbacks are marked as 'worklet' if you wish to run them on the UI thread or use '.runOnJS(true)' modifier on the gesture explicitly to run all callbacks on the JS thread.`\n      )\n    );\n  }\n}\n\ninterface WebEventHandler {\n  onGestureHandlerEvent: (event: HandlerStateChangeEvent<unknown>) => void;\n  onGestureHandlerStateChange?: (\n    event: HandlerStateChangeEvent<unknown>\n  ) => void;\n}\n\ninterface AttachHandlersConfig {\n  preparedGesture: GestureConfigReference;\n  gestureConfig: ComposedGesture | GestureType;\n  gesture: GestureType[];\n  viewTag: number;\n  webEventHandlersRef: React.RefObject<WebEventHandler>;\n  mountedRef: React.RefObject<boolean>;\n}\n\nfunction attachHandlers({\n  preparedGesture,\n  gestureConfig,\n  gesture,\n  viewTag,\n  webEventHandlersRef,\n  mountedRef,\n}: AttachHandlersConfig) {\n  if (!preparedGesture.firstExecution) {\n    gestureConfig.initialize();\n  } else {\n    preparedGesture.firstExecution = false;\n  }\n\n  // use queueMicrotask to extract handlerTags, because all refs should be initialized\n  // when it's ran\n  ghQueueMicrotask(() => {\n    if (!mountedRef.current) {\n      return;\n    }\n    gestureConfig.prepare();\n  });\n\n  for (const handler of gesture) {\n    checkGestureCallbacksForWorklets(handler);\n    RNGestureHandlerModule.createGestureHandler(\n      handler.handlerName,\n      handler.handlerTag,\n      filterConfig(handler.config, ALLOWED_PROPS)\n    );\n\n    registerHandler(handler.handlerTag, handler, handler.config.testId);\n  }\n\n  // use queueMicrotask to extract handlerTags, because all refs should be initialized\n  // when it's ran\n  ghQueueMicrotask(() => {\n    if (!mountedRef.current) {\n      return;\n    }\n    for (const handler of gesture) {\n      let requireToFail: number[] = [];\n      if (handler.config.requireToFail) {\n        requireToFail = extractValidHandlerTags(handler.config.requireToFail);\n      }\n\n      let simultaneousWith: number[] = [];\n      if (handler.config.simultaneousWith) {\n        simultaneousWith = extractValidHandlerTags(\n          handler.config.simultaneousWith\n        );\n      }\n\n      let blocksHandlers: number[] = [];\n      if (handler.config.blocksHandlers) {\n        blocksHandlers = extractValidHandlerTags(handler.config.blocksHandlers);\n      }\n\n      RNGestureHandlerModule.updateGestureHandler(\n        handler.handlerTag,\n        filterConfig(handler.config, ALLOWED_PROPS, {\n          simultaneousHandlers: simultaneousWith,\n          waitFor: requireToFail,\n          blocksHandlers: blocksHandlers,\n        })\n      );\n    }\n\n    scheduleFlushOperations();\n  });\n\n  preparedGesture.config = gesture;\n\n  for (const gesture of preparedGesture.config) {\n    const actionType = gesture.shouldUseReanimated\n      ? ActionType.REANIMATED_WORKLET\n      : ActionType.JS_FUNCTION_NEW_API;\n\n    if (Platform.OS === 'web') {\n      (\n        RNGestureHandlerModule.attachGestureHandler as typeof RNGestureHandlerModuleWeb.attachGestureHandler\n      )(\n        gesture.handlerTag,\n        viewTag,\n        ActionType.JS_FUNCTION_OLD_API, // ignored on web\n        webEventHandlersRef\n      );\n    } else {\n      RNGestureHandlerModule.attachGestureHandler(\n        gesture.handlerTag,\n        viewTag,\n        actionType\n      );\n    }\n  }\n\n  if (preparedGesture.animatedHandlers) {\n    const isAnimatedGesture = (g: GestureType) => g.shouldUseReanimated;\n\n    preparedGesture.animatedHandlers.value = gesture\n      .filter(isAnimatedGesture)\n      .map((g) => g.handlers) as unknown as HandlerCallbacks<\n      Record<string, unknown>\n    >[];\n  }\n}\n\nfunction updateHandlers(\n  preparedGesture: GestureConfigReference,\n  gestureConfig: ComposedGesture | GestureType,\n  gesture: GestureType[],\n  mountedRef: React.RefObject<boolean>\n) {\n  gestureConfig.prepare();\n\n  for (let i = 0; i < gesture.length; i++) {\n    const handler = preparedGesture.config[i];\n    checkGestureCallbacksForWorklets(handler);\n\n    // only update handlerTag when it's actually different, it may be the same\n    // if gesture config object is wrapped with useMemo\n    if (gesture[i].handlerTag !== handler.handlerTag) {\n      gesture[i].handlerTag = handler.handlerTag;\n      gesture[i].handlers.handlerTag = handler.handlerTag;\n    }\n  }\n\n  // use queueMicrotask to extract handlerTags, because when it's ran, all refs should be updated\n  // and handlerTags in BaseGesture references should be updated in the loop above (we need to wait\n  // in case of external relations)\n  ghQueueMicrotask(() => {\n    if (!mountedRef.current) {\n      return;\n    }\n    for (let i = 0; i < gesture.length; i++) {\n      const handler = preparedGesture.config[i];\n\n      handler.config = gesture[i].config;\n      handler.handlers = gesture[i].handlers;\n\n      const requireToFail = extractValidHandlerTags(\n        handler.config.requireToFail\n      );\n\n      const simultaneousWith = extractValidHandlerTags(\n        handler.config.simultaneousWith\n      );\n\n      RNGestureHandlerModule.updateGestureHandler(\n        handler.handlerTag,\n        filterConfig(handler.config, ALLOWED_PROPS, {\n          simultaneousHandlers: simultaneousWith,\n          waitFor: requireToFail,\n        })\n      );\n\n      registerHandler(handler.handlerTag, handler, handler.config.testId);\n    }\n\n    if (preparedGesture.animatedHandlers) {\n      const previousHandlersValue =\n        preparedGesture.animatedHandlers.value ?? [];\n      const newHandlersValue = preparedGesture.config\n        .filter((g) => g.shouldUseReanimated) // ignore gestures that shouldn't run on UI\n        .map((g) => g.handlers) as unknown as HandlerCallbacks<\n        Record<string, unknown>\n      >[];\n\n      // if amount of gesture configs changes, we need to update the callbacks in shared value\n      let shouldUpdateSharedValue =\n        previousHandlersValue.length !== newHandlersValue.length;\n\n      if (!shouldUpdateSharedValue) {\n        // if the amount is the same, we need to check if any of the configs inside has changed\n        for (let i = 0; i < newHandlersValue.length; i++) {\n          if (\n            // we can use the `gestureId` prop as it's unique for every config instance\n            newHandlersValue[i].gestureId !== previousHandlersValue[i].gestureId\n          ) {\n            shouldUpdateSharedValue = true;\n            break;\n          }\n        }\n      }\n\n      if (shouldUpdateSharedValue) {\n        preparedGesture.animatedHandlers.value = newHandlersValue;\n      }\n    }\n\n    scheduleFlushOperations();\n  });\n}\n\nfunction needsToReattach(\n  preparedGesture: GestureConfigReference,\n  gesture: GestureType[]\n) {\n  if (gesture.length !== preparedGesture.config.length) {\n    return true;\n  }\n  for (let i = 0; i < gesture.length; i++) {\n    if (\n      gesture[i].handlerName !== preparedGesture.config[i].handlerName ||\n      gesture[i].shouldUseReanimated !==\n        preparedGesture.config[i].shouldUseReanimated\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction isStateChangeEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n): event is GestureStateChangeEvent {\n  'worklet';\n  // @ts-ignore Yes, the oldState prop is missing on GestureTouchEvent, that's the point\n  return event.oldState != null;\n}\n\nfunction isTouchEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n): event is GestureTouchEvent {\n  'worklet';\n  return event.eventType != null;\n}\n\nfunction getHandler(\n  type: CALLBACK_TYPE,\n  gesture: HandlerCallbacks<Record<string, unknown>>\n) {\n  'worklet';\n  switch (type) {\n    case CALLBACK_TYPE.BEGAN:\n      return gesture.onBegin;\n    case CALLBACK_TYPE.START:\n      return gesture.onStart;\n    case CALLBACK_TYPE.UPDATE:\n      return gesture.onUpdate;\n    case CALLBACK_TYPE.CHANGE:\n      return gesture.onChange;\n    case CALLBACK_TYPE.END:\n      return gesture.onEnd;\n    case CALLBACK_TYPE.FINALIZE:\n      return gesture.onFinalize;\n    case CALLBACK_TYPE.TOUCHES_DOWN:\n      return gesture.onTouchesDown;\n    case CALLBACK_TYPE.TOUCHES_MOVE:\n      return gesture.onTouchesMove;\n    case CALLBACK_TYPE.TOUCHES_UP:\n      return gesture.onTouchesUp;\n    case CALLBACK_TYPE.TOUCHES_CANCELLED:\n      return gesture.onTouchesCancelled;\n  }\n}\n\nfunction touchEventTypeToCallbackType(\n  eventType: TouchEventType\n): CALLBACK_TYPE {\n  'worklet';\n  switch (eventType) {\n    case TouchEventType.TOUCHES_DOWN:\n      return CALLBACK_TYPE.TOUCHES_DOWN;\n    case TouchEventType.TOUCHES_MOVE:\n      return CALLBACK_TYPE.TOUCHES_MOVE;\n    case TouchEventType.TOUCHES_UP:\n      return CALLBACK_TYPE.TOUCHES_UP;\n    case TouchEventType.TOUCHES_CANCELLED:\n      return CALLBACK_TYPE.TOUCHES_CANCELLED;\n  }\n  return CALLBACK_TYPE.UNDEFINED;\n}\n\nfunction runWorklet(\n  type: CALLBACK_TYPE,\n  gesture: HandlerCallbacks<Record<string, unknown>>,\n  event: GestureStateChangeEvent | GestureUpdateEvent | GestureTouchEvent,\n  ...args: any[]\n) {\n  'worklet';\n  const handler = getHandler(type, gesture);\n  if (gesture.isWorklet[type]) {\n    // @ts-ignore Logic below makes sure the correct event is send to the\n    // correct handler.\n    handler?.(event, ...args);\n  } else if (handler) {\n    console.warn(tagMessage('Animated gesture callback must be a worklet'));\n  }\n}\n\nfunction useAnimatedGesture(\n  preparedGesture: GestureConfigReference,\n  needsRebuild: boolean\n) {\n  if (!Reanimated) {\n    return;\n  }\n\n  // Hooks are called conditionally, but the condition is whether the\n  // react-native-reanimated is installed, which shouldn't change while running\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const sharedHandlersCallbacks = Reanimated.useSharedValue<\n    HandlerCallbacks<Record<string, unknown>>[] | null\n  >(null);\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const lastUpdateEvent = Reanimated.useSharedValue<\n    (GestureUpdateEvent | undefined)[]\n  >([]);\n\n  // not every gesture needs a state controller, init them lazily\n  const stateControllers: GestureStateManagerType[] = [];\n\n  const callback = (\n    event: GestureStateChangeEvent | GestureUpdateEvent | GestureTouchEvent\n  ) => {\n    'worklet';\n\n    const currentCallback = sharedHandlersCallbacks.value;\n    if (!currentCallback) {\n      return;\n    }\n\n    for (let i = 0; i < currentCallback.length; i++) {\n      const gesture = currentCallback[i];\n\n      if (event.handlerTag === gesture.handlerTag) {\n        if (isStateChangeEvent(event)) {\n          if (\n            event.oldState === State.UNDETERMINED &&\n            event.state === State.BEGAN\n          ) {\n            runWorklet(CALLBACK_TYPE.BEGAN, gesture, event);\n          } else if (\n            (event.oldState === State.BEGAN ||\n              event.oldState === State.UNDETERMINED) &&\n            event.state === State.ACTIVE\n          ) {\n            runWorklet(CALLBACK_TYPE.START, gesture, event);\n            lastUpdateEvent.value[gesture.handlerTag] = undefined;\n          } else if (\n            event.oldState !== event.state &&\n            event.state === State.END\n          ) {\n            if (event.oldState === State.ACTIVE) {\n              runWorklet(CALLBACK_TYPE.END, gesture, event, true);\n            }\n            runWorklet(CALLBACK_TYPE.FINALIZE, gesture, event, true);\n          } else if (\n            (event.state === State.FAILED || event.state === State.CANCELLED) &&\n            event.state !== event.oldState\n          ) {\n            if (event.oldState === State.ACTIVE) {\n              runWorklet(CALLBACK_TYPE.END, gesture, event, false);\n            }\n            runWorklet(CALLBACK_TYPE.FINALIZE, gesture, event, false);\n          }\n        } else if (isTouchEvent(event)) {\n          if (!stateControllers[i]) {\n            stateControllers[i] = GestureStateManager.create(event.handlerTag);\n          }\n\n          if (event.eventType !== TouchEventType.UNDETERMINED) {\n            runWorklet(\n              touchEventTypeToCallbackType(event.eventType),\n              gesture,\n              event,\n              stateControllers[i]\n            );\n          }\n        } else {\n          runWorklet(CALLBACK_TYPE.UPDATE, gesture, event);\n\n          if (gesture.onChange && gesture.changeEventCalculator) {\n            runWorklet(\n              CALLBACK_TYPE.CHANGE,\n              gesture,\n              gesture.changeEventCalculator?.(\n                event,\n                lastUpdateEvent.value[gesture.handlerTag]\n              )\n            );\n\n            lastUpdateEvent.value[gesture.handlerTag] = event;\n          }\n        }\n      }\n    }\n  };\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const event = Reanimated.useEvent(\n    callback,\n    ['onGestureHandlerStateChange', 'onGestureHandlerEvent'],\n    needsRebuild\n  );\n\n  preparedGesture.animatedEventHandler = event;\n  preparedGesture.animatedHandlers = sharedHandlersCallbacks;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction validateDetectorChildren(ref: any) {\n  // finds the first native view under the Wrap component and traverses the fiber tree upwards\n  // to check whether there is more than one native view as a pseudo-direct child of GestureDetector\n  // i.e. this is not ok:\n  //            Wrap\n  //             |\n  //            / \\\n  //           /   \\\n  //          /     \\\n  //         /       \\\n  //   NativeView  NativeView\n  //\n  // but this is fine:\n  //            Wrap\n  //             |\n  //         NativeView\n  //             |\n  //            / \\\n  //           /   \\\n  //          /     \\\n  //         /       \\\n  //   NativeView  NativeView\n  if (__DEV__ && Platform.OS !== 'web') {\n    const REACT_NATIVE_VERSION = getReactNativeVersion();\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const wrapType =\n      REACT_NATIVE_VERSION.minor > 63 || REACT_NATIVE_VERSION.major > 0\n        ? // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n          ref._reactInternals.elementType\n        : // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n          ref._reactInternalFiber.elementType;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    let instance =\n      RNRenderer.findHostInstance_DEPRECATED(\n        ref\n      )._internalFiberInstanceHandleDEV;\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    while (instance && instance.elementType !== wrapType) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (instance.sibling) {\n        throw new Error(\n          'GestureDetector has more than one native view as its children. This can happen if you are using a custom component that renders multiple views, like React.Fragment. You should wrap content of GestureDetector with a <View> or <Animated.View>.'\n        );\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n      instance = instance.return;\n    }\n  }\n}\n\nconst applyUserSelectProp = (\n  userSelect: UserSelect,\n  gesture: ComposedGesture | GestureType\n): void => {\n  for (const g of gesture.toGestureArray()) {\n    g.config.userSelect = userSelect;\n  }\n};\n\nconst applyEnableContextMenuProp = (\n  enableContextMenu: boolean,\n  gesture: ComposedGesture | GestureType\n): void => {\n  for (const g of gesture.toGestureArray()) {\n    g.config.enableContextMenu = enableContextMenu;\n  }\n};\n\nconst applyTouchActionProp = (\n  touchAction: TouchAction,\n  gesture: ComposedGesture | GestureType\n): void => {\n  for (const g of gesture.toGestureArray()) {\n    g.config.touchAction = touchAction;\n  }\n};\n\ninterface GestureDetectorProps {\n  /**\n   * A gesture object containing the configuration and callbacks.\n   * Can be any of:\n   * - base gestures (`Tap`, `Pan`, ...)\n   * - `ComposedGesture` (`Race`, `Simultaneous`, `Exclusive`)\n   */\n  gesture: ComposedGesture | GestureType;\n  children?: React.ReactNode;\n\n  /**\n   * #### Web only\n   * This parameter allows to specify which `userSelect` property should be applied to underlying view.\n   * Possible values are `\"none\" | \"auto\" | \"text\"`. Default value is set to `\"none\"`.\n   */\n  userSelect?: UserSelect;\n  /**\n   * #### Web only\n   * Specifies whether context menu should be enabled after clicking on underlying view with right mouse button.\n   * Default value is set to `false`.\n   */\n  enableContextMenu?: boolean;\n  /**\n   * #### Web only\n   * This parameter allows to specify which `touchAction` property should be applied to underlying view.\n   * Supports all CSS touch-action values (e.g. `\"none\"`, `\"pan-y\"`). Default value is set to `\"none\"`.\n   */\n  touchAction?: TouchAction;\n}\ninterface GestureDetectorState {\n  firstRender: boolean;\n  viewRef: React.Component | null;\n  previousViewTag: number;\n  forceReattach: boolean;\n}\n\n/**\n * `GestureDetector` is responsible for creating and updating native gesture handlers based on the config of provided gesture.\n *\n * ### Props\n * - `gesture`\n * - `userSelect` (**Web only**)\n * - `enableContextMenu` (**Web only**)\n * - `touchAction` (**Web only**)\n *\n * ### Remarks\n * - Gesture Detector will use first native view in its subtree to recognize gestures, however if this view is used only to group its children it may get automatically collapsed.\n * - Using the same instance of a gesture across multiple Gesture Detectors is not possible.\n *\n * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/gesture-detector\n */\nexport const GestureDetector = (props: GestureDetectorProps) => {\n  const rootViewContext = useContext(GestureHandlerRootViewContext);\n  if (__DEV__ && !rootViewContext && !isJestEnv() && Platform.OS !== 'web') {\n    throw new Error(\n      'GestureDetector must be used as a descendant of GestureHandlerRootView. Otherwise the gestures will not be recognized. See https://docs.swmansion.com/react-native-gesture-handler/docs/installation for more details.'\n    );\n  }\n\n  const gestureConfig = props.gesture;\n\n  if (props.userSelect) {\n    applyUserSelectProp(props.userSelect, gestureConfig);\n  }\n\n  if (props.enableContextMenu !== undefined) {\n    applyEnableContextMenuProp(props.enableContextMenu, gestureConfig);\n  }\n\n  if (props.touchAction !== undefined) {\n    applyTouchActionProp(props.touchAction, gestureConfig);\n  }\n\n  const gesture = gestureConfig.toGestureArray();\n  const useReanimatedHook = gesture.some((g) => g.shouldUseReanimated);\n\n  // store state in ref to prevent unnecessary renders\n  const state = useRef<GestureDetectorState>({\n    firstRender: true,\n    viewRef: null,\n    previousViewTag: -1,\n    forceReattach: false,\n  }).current;\n  const mountedRef = useRef(false);\n  const webEventHandlersRef = useRef<WebEventHandler>({\n    onGestureHandlerEvent: (e: HandlerStateChangeEvent<unknown>) => {\n      onGestureHandlerEvent(e.nativeEvent);\n    },\n    onGestureHandlerStateChange: isNewWebImplementationEnabled()\n      ? (e: HandlerStateChangeEvent<unknown>) => {\n          onGestureHandlerEvent(e.nativeEvent);\n        }\n      : undefined,\n  });\n\n  const [renderState, setRenderState] = useState(false);\n  function forceRender() {\n    setRenderState(!renderState);\n  }\n\n  const preparedGesture = React.useRef<GestureConfigReference>({\n    config: gesture,\n    animatedEventHandler: null,\n    animatedHandlers: null,\n    firstExecution: true,\n    useReanimatedHook: useReanimatedHook,\n  }).current;\n\n  if (useReanimatedHook !== preparedGesture.useReanimatedHook) {\n    throw new Error(\n      tagMessage(\n        'You cannot change the thread the callbacks are ran on while the app is running'\n      )\n    );\n  }\n\n  function onHandlersUpdate(skipConfigUpdate?: boolean) {\n    // if the underlying view has changed we need to reattach handlers to the new view\n    const viewTag = findNodeHandle(state.viewRef) as number;\n    const forceReattach = viewTag !== state.previousViewTag;\n\n    if (forceReattach || needsToReattach(preparedGesture, gesture)) {\n      validateDetectorChildren(state.viewRef);\n      dropHandlers(preparedGesture);\n      attachHandlers({\n        preparedGesture,\n        gestureConfig,\n        gesture,\n        webEventHandlersRef,\n        viewTag,\n        mountedRef,\n      });\n\n      state.previousViewTag = viewTag;\n      state.forceReattach = forceReattach;\n      if (forceReattach) {\n        forceRender();\n      }\n    } else if (!skipConfigUpdate) {\n      updateHandlers(preparedGesture, gestureConfig, gesture, mountedRef);\n    }\n  }\n\n  // Reanimated event should be rebuilt only when gestures are reattached, otherwise\n  // config update will be enough as all necessary items are stored in shared values anyway\n  const needsToRebuildReanimatedEvent =\n    preparedGesture.firstExecution ||\n    needsToReattach(preparedGesture, gesture) ||\n    state.forceReattach;\n\n  state.forceReattach = false;\n\n  if (preparedGesture.firstExecution) {\n    gestureConfig.initialize();\n  }\n\n  if (useReanimatedHook) {\n    // Whether animatedGesture or gesture is used shouldn't change while the app is running\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useAnimatedGesture(preparedGesture, needsToRebuildReanimatedEvent);\n  }\n\n  useEffect(() => {\n    const viewTag = findNodeHandle(state.viewRef) as number;\n    state.firstRender = true;\n    mountedRef.current = true;\n\n    validateDetectorChildren(state.viewRef);\n\n    attachHandlers({\n      preparedGesture,\n      gestureConfig,\n      gesture,\n      webEventHandlersRef,\n      viewTag,\n      mountedRef,\n    });\n\n    return () => {\n      mountedRef.current = false;\n      dropHandlers(preparedGesture);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!state.firstRender) {\n      onHandlersUpdate();\n    } else {\n      state.firstRender = false;\n    }\n  }, [props]);\n\n  const refFunction = (ref: unknown) => {\n    if (ref !== null) {\n      // @ts-ignore Just setting the view ref\n      state.viewRef = ref;\n\n      // if it's the first render, also set the previousViewTag to prevent reattaching gestures when not needed\n      if (state.previousViewTag === -1) {\n        state.previousViewTag = findNodeHandle(state.viewRef) as number;\n      }\n\n      // pass true as `skipConfigUpdate`, here we only want to trigger the eventual reattaching of handlers\n      // in case the view has changed, while config update would be handled be the `useEffect` above\n      onHandlersUpdate(true);\n\n      if (isFabric() && global.isFormsStackingContext) {\n        const node = getShadowNodeFromRef(ref);\n        if (global.isFormsStackingContext(node) === false) {\n          console.error(\n            tagMessage(\n              'GestureDetector has received a child that may get view-flattened. ' +\n                '\\nTo prevent it from misbehaving you need to wrap the child with a `<View collapsable={false}>`.'\n            )\n          );\n        }\n      }\n    }\n  };\n\n  if (useReanimatedHook) {\n    return (\n      <AnimatedWrap\n        ref={refFunction}\n        onGestureHandlerEvent={preparedGesture.animatedEventHandler}>\n        {props.children}\n      </AnimatedWrap>\n    );\n  } else {\n    return <Wrap ref={refFunction}>{props.children}</Wrap>;\n  }\n};\n\nclass Wrap extends React.Component<{\n  onGestureHandlerEvent?: unknown;\n  // implicit `children` prop has been removed in @types/react^18.0.0\n  children?: React.ReactNode;\n}> {\n  render() {\n    try {\n      // I don't think that fighting with types over such a simple function is worth it\n      // The only thing it does is add 'collapsable: false' to the child component\n      // to make sure it is in the native view hierarchy so the detector can find\n      // correct viewTag to attach to.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const child: any = React.Children.only(this.props.children);\n      return React.cloneElement(\n        child,\n        { collapsable: false },\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        child.props.children\n      );\n    } catch (e) {\n      throw new Error(\n        tagMessage(\n          `GestureDetector got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.`\n        )\n      );\n    }\n  }\n}\n\nconst AnimatedWrap = Reanimated?.default?.createAnimatedComponent(Wrap) ?? Wrap;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport { flattenArray } from \"./utils\";\nimport { makeViewDescriptorsSet } from \"../reanimated2/ViewDescriptorsSet\";\nimport { adaptViewConfig } from \"../ConfigHelper\";\nimport updateProps from \"../reanimated2/UpdateProps\";\nimport { stopMapper, startMapper } from \"../reanimated2/mappers\";\nimport { isSharedValue } from \"../reanimated2/isSharedValue\";\nimport { shouldBeUseWeb } from \"../reanimated2/PlatformChecker\";\nvar SHOULD_BE_USE_WEB = shouldBeUseWeb();\nfunction isInlineStyleTransform(transform) {\n  if (!Array.isArray(transform)) {\n    return false;\n  }\n  return transform.some(function (t) {\n    return hasInlineStyles(t);\n  });\n}\nfunction inlinePropsHasChanged(styles1, styles2) {\n  if (Object.keys(styles1).length !== Object.keys(styles2).length) {\n    return true;\n  }\n  for (var _i = 0, _Object$keys = Object.keys(styles1); _i < _Object$keys.length; _i++) {\n    var key = _Object$keys[_i];\n    if (styles1[key] !== styles2[key]) return true;\n  }\n  return false;\n}\nfunction getInlinePropsUpdate(inlineProps) {\n  'worklet';\n\n  var update = {};\n  for (var _i2 = 0, _Object$entries = Object.entries(inlineProps); _i2 < _Object$entries.length; _i2++) {\n    var _ref = _Object$entries[_i2];\n    var _ref2 = _slicedToArray(_ref, 2);\n    var key = _ref2[0];\n    var styleValue = _ref2[1];\n    if (isSharedValue(styleValue)) {\n      update[key] = styleValue.value;\n    } else if (Array.isArray(styleValue)) {\n      update[key] = styleValue.map(function (item) {\n        return getInlinePropsUpdate(item);\n      });\n    } else if (typeof styleValue === 'object') {\n      update[key] = getInlinePropsUpdate(styleValue);\n    } else {\n      update[key] = styleValue;\n    }\n  }\n  return update;\n}\nfunction extractSharedValuesMapFromProps(props) {\n  var inlineProps = {};\n  for (var key in props) {\n    var value = props[key];\n    if (key === 'style') {\n      var _props$style;\n      var styles = flattenArray((_props$style = props.style) != null ? _props$style : []);\n      styles.forEach(function (style) {\n        if (!style) {\n          return;\n        }\n        for (var _i3 = 0, _Object$entries2 = Object.entries(style); _i3 < _Object$entries2.length; _i3++) {\n          var _ref3 = _Object$entries2[_i3];\n          var _ref4 = _slicedToArray(_ref3, 2);\n          var styleKey = _ref4[0];\n          var styleValue = _ref4[1];\n          if (isSharedValue(styleValue)) {\n            inlineProps[styleKey] = styleValue;\n          } else if (styleKey === 'transform' && isInlineStyleTransform(styleValue)) {\n            inlineProps[styleKey] = styleValue;\n          }\n        }\n      });\n    } else if (isSharedValue(value)) {\n      inlineProps[key] = value;\n    }\n  }\n  return inlineProps;\n}\nexport function hasInlineStyles(style) {\n  if (!style) {\n    return false;\n  }\n  return Object.keys(style).some(function (key) {\n    var styleValue = style[key];\n    return isSharedValue(styleValue) || key === 'transform' && isInlineStyleTransform(styleValue);\n  });\n}\nexport function getInlineStyle(style, shouldGetInitialStyle) {\n  if (shouldGetInitialStyle) {\n    return getInlinePropsUpdate(style);\n  }\n  var newStyle = {};\n  for (var _i4 = 0, _Object$entries3 = Object.entries(style); _i4 < _Object$entries3.length; _i4++) {\n    var _ref5 = _Object$entries3[_i4];\n    var _ref6 = _slicedToArray(_ref5, 2);\n    var key = _ref6[0];\n    var styleValue = _ref6[1];\n    if (!isSharedValue(styleValue) && !(key === 'transform' && isInlineStyleTransform(styleValue))) {\n      newStyle[key] = styleValue;\n    }\n  }\n  return newStyle;\n}\nexport var InlinePropManager = function () {\n  function InlinePropManager() {\n    _classCallCheck(this, InlinePropManager);\n    _defineProperty(this, \"_inlinePropsViewDescriptors\", null);\n    _defineProperty(this, \"_inlinePropsMapperId\", null);\n    _defineProperty(this, \"_inlineProps\", {});\n  }\n  return _createClass(InlinePropManager, [{\n    key: \"attachInlineProps\",\n    value: function attachInlineProps(animatedComponent, viewInfo) {\n      var newInlineProps = extractSharedValuesMapFromProps(animatedComponent.props);\n      var hasChanged = inlinePropsHasChanged(newInlineProps, this._inlineProps);\n      if (hasChanged) {\n        if (!this._inlinePropsViewDescriptors) {\n          this._inlinePropsViewDescriptors = makeViewDescriptorsSet();\n          var viewTag = viewInfo.viewTag,\n            viewName = viewInfo.viewName,\n            shadowNodeWrapper = viewInfo.shadowNodeWrapper,\n            viewConfig = viewInfo.viewConfig;\n          if (Object.keys(newInlineProps).length && viewConfig) {\n            adaptViewConfig(viewConfig);\n          }\n          this._inlinePropsViewDescriptors.add({\n            tag: viewTag,\n            name: viewName,\n            shadowNodeWrapper: shadowNodeWrapper\n          });\n        }\n        var shareableViewDescriptors = this._inlinePropsViewDescriptors.shareableViewDescriptors;\n        var maybeViewRef = SHOULD_BE_USE_WEB ? {\n          items: new Set([animatedComponent])\n        } : undefined;\n        var updaterFunction = function updaterFunction() {\n          'worklet';\n\n          var update = getInlinePropsUpdate(newInlineProps);\n          updateProps(shareableViewDescriptors, update, maybeViewRef);\n        };\n        this._inlineProps = newInlineProps;\n        if (this._inlinePropsMapperId) {\n          stopMapper(this._inlinePropsMapperId);\n        }\n        this._inlinePropsMapperId = null;\n        if (Object.keys(newInlineProps).length) {\n          this._inlinePropsMapperId = startMapper(updaterFunction, Object.values(newInlineProps));\n        }\n      }\n    }\n  }, {\n    key: \"detachInlineProps\",\n    value: function detachInlineProps() {\n      if (this._inlinePropsMapperId) {\n        stopMapper(this._inlinePropsMapperId);\n      }\n    }\n  }]);\n}();","map":{"version":3,"names":["_classCallCheck","_createClass","_slicedToArray","_defineProperty","obj","key","value","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","t","i","_toPrimitive","r","e","Symbol","toPrimitive","call","TypeError","String","Number","flattenArray","makeViewDescriptorsSet","adaptViewConfig","updateProps","stopMapper","startMapper","isSharedValue","shouldBeUseWeb","SHOULD_BE_USE_WEB","isInlineStyleTransform","transform","Array","isArray","some","hasInlineStyles","inlinePropsHasChanged","styles1","styles2","keys","length","_i","_Object$keys","getInlinePropsUpdate","inlineProps","update","_i2","_Object$entries","entries","_ref","_ref2","styleValue","map","item","extractSharedValuesMapFromProps","props","_props$style","styles","style","forEach","_i3","_Object$entries2","_ref3","_ref4","styleKey","getInlineStyle","shouldGetInitialStyle","newStyle","_i4","_Object$entries3","_ref5","_ref6","InlinePropManager","attachInlineProps","animatedComponent","viewInfo","newInlineProps","hasChanged","_inlineProps","_inlinePropsViewDescriptors","viewTag","viewName","shadowNodeWrapper","viewConfig","add","tag","name","shareableViewDescriptors","maybeViewRef","items","Set","undefined","updaterFunction","_inlinePropsMapperId","values","detachInlineProps"],"sources":["/Users/xd/Desktop/study/react/react-project/StickerSmash/node_modules/react-native-reanimated/lib/module/createAnimatedComponent/InlinePropManager.ts"],"sourcesContent":["'use strict';\nimport type { StyleProps } from '../reanimated2';\nimport type {\n  IAnimatedComponentInternal,\n  AnimatedComponentProps,\n  IInlinePropManager,\n  ViewInfo,\n} from './commonTypes';\nimport { flattenArray } from './utils';\nimport { makeViewDescriptorsSet } from '../reanimated2/ViewDescriptorsSet';\nimport type {\n  ViewDescriptorsSet,\n  ViewRefSet,\n} from '../reanimated2/ViewDescriptorsSet';\nimport { adaptViewConfig } from '../ConfigHelper';\nimport updateProps from '../reanimated2/UpdateProps';\nimport { stopMapper, startMapper } from '../reanimated2/mappers';\nimport { isSharedValue } from '../reanimated2/isSharedValue';\nimport { shouldBeUseWeb } from '../reanimated2/PlatformChecker';\n\nconst SHOULD_BE_USE_WEB = shouldBeUseWeb();\n\nfunction isInlineStyleTransform(transform: unknown): boolean {\n  if (!Array.isArray(transform)) {\n    return false;\n  }\n\n  return transform.some((t: Record<string, unknown>) => hasInlineStyles(t));\n}\n\nfunction inlinePropsHasChanged(\n  styles1: StyleProps,\n  styles2: StyleProps\n): boolean {\n  if (Object.keys(styles1).length !== Object.keys(styles2).length) {\n    return true;\n  }\n\n  for (const key of Object.keys(styles1)) {\n    if (styles1[key] !== styles2[key]) return true;\n  }\n\n  return false;\n}\n\nfunction getInlinePropsUpdate(inlineProps: Record<string, unknown>) {\n  'worklet';\n  const update: Record<string, unknown> = {};\n  for (const [key, styleValue] of Object.entries(inlineProps)) {\n    if (isSharedValue(styleValue)) {\n      update[key] = styleValue.value;\n    } else if (Array.isArray(styleValue)) {\n      update[key] = styleValue.map((item) => {\n        return getInlinePropsUpdate(item);\n      });\n    } else if (typeof styleValue === 'object') {\n      update[key] = getInlinePropsUpdate(styleValue as Record<string, unknown>);\n    } else {\n      update[key] = styleValue;\n    }\n  }\n  return update;\n}\n\nfunction extractSharedValuesMapFromProps(\n  props: AnimatedComponentProps<\n    Record<string, unknown> /* Initial component props */\n  >\n): Record<string, unknown> {\n  const inlineProps: Record<string, unknown> = {};\n\n  for (const key in props) {\n    const value = props[key];\n    if (key === 'style') {\n      const styles = flattenArray<StyleProps>(props.style ?? []);\n      styles.forEach((style) => {\n        if (!style) {\n          return;\n        }\n        for (const [styleKey, styleValue] of Object.entries(style)) {\n          if (isSharedValue(styleValue)) {\n            inlineProps[styleKey] = styleValue;\n          } else if (\n            styleKey === 'transform' &&\n            isInlineStyleTransform(styleValue)\n          ) {\n            inlineProps[styleKey] = styleValue;\n          }\n        }\n      });\n    } else if (isSharedValue(value)) {\n      inlineProps[key] = value;\n    }\n  }\n\n  return inlineProps;\n}\n\nexport function hasInlineStyles(style: StyleProps): boolean {\n  if (!style) {\n    return false;\n  }\n  return Object.keys(style).some((key) => {\n    const styleValue = style[key];\n    return (\n      isSharedValue(styleValue) ||\n      (key === 'transform' && isInlineStyleTransform(styleValue))\n    );\n  });\n}\n\nexport function getInlineStyle(\n  style: Record<string, unknown>,\n  shouldGetInitialStyle: boolean\n) {\n  if (shouldGetInitialStyle) {\n    return getInlinePropsUpdate(style);\n  }\n  const newStyle: StyleProps = {};\n  for (const [key, styleValue] of Object.entries(style)) {\n    if (\n      !isSharedValue(styleValue) &&\n      !(key === 'transform' && isInlineStyleTransform(styleValue))\n    ) {\n      newStyle[key] = styleValue;\n    }\n  }\n  return newStyle;\n}\n\nexport class InlinePropManager implements IInlinePropManager {\n  _inlinePropsViewDescriptors: ViewDescriptorsSet | null = null;\n  _inlinePropsMapperId: number | null = null;\n  _inlineProps: StyleProps = {};\n\n  public attachInlineProps(\n    animatedComponent: React.Component<unknown, unknown> &\n      IAnimatedComponentInternal,\n    viewInfo: ViewInfo\n  ) {\n    const newInlineProps: Record<string, unknown> =\n      extractSharedValuesMapFromProps(animatedComponent.props);\n    const hasChanged = inlinePropsHasChanged(newInlineProps, this._inlineProps);\n\n    if (hasChanged) {\n      if (!this._inlinePropsViewDescriptors) {\n        this._inlinePropsViewDescriptors = makeViewDescriptorsSet();\n\n        const { viewTag, viewName, shadowNodeWrapper, viewConfig } = viewInfo;\n\n        if (Object.keys(newInlineProps).length && viewConfig) {\n          adaptViewConfig(viewConfig);\n        }\n\n        this._inlinePropsViewDescriptors.add({\n          tag: viewTag as number,\n          name: viewName!,\n          shadowNodeWrapper: shadowNodeWrapper!,\n        });\n      }\n      const shareableViewDescriptors =\n        this._inlinePropsViewDescriptors.shareableViewDescriptors;\n\n      const maybeViewRef = SHOULD_BE_USE_WEB\n        ? ({ items: new Set([animatedComponent]) } as ViewRefSet<unknown>) // see makeViewsRefSet\n        : undefined;\n      const updaterFunction = () => {\n        'worklet';\n        const update = getInlinePropsUpdate(newInlineProps);\n        updateProps(shareableViewDescriptors, update, maybeViewRef);\n      };\n      this._inlineProps = newInlineProps;\n      if (this._inlinePropsMapperId) {\n        stopMapper(this._inlinePropsMapperId);\n      }\n      this._inlinePropsMapperId = null;\n      if (Object.keys(newInlineProps).length) {\n        this._inlinePropsMapperId = startMapper(\n          updaterFunction,\n          Object.values(newInlineProps)\n        );\n      }\n    }\n  }\n\n  public detachInlineProps() {\n    if (this._inlinePropsMapperId) {\n      stopMapper(this._inlinePropsMapperId);\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"'use strict';\n\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport NativeReanimatedModule from \"./NativeReanimated\";\nimport { isWorkletFunction } from \"./commonTypes\";\nimport { shouldBeUseWeb } from \"./PlatformChecker\";\nimport { registerWorkletStackDetails } from \"./errors\";\nimport { jsVersion } from \"./platform-specific/jsVersion\";\nimport { shareableMappingCache, shareableMappingFlag } from \"./shareableMappingCache\";\nvar SHOULD_BE_USE_WEB = shouldBeUseWeb();\nvar MAGIC_KEY = 'REANIMATED_MAGIC_KEY';\nfunction isHostObject(value) {\n  'worklet';\n  return MAGIC_KEY in value;\n}\nfunction isPlainJSObject(object) {\n  return Object.getPrototypeOf(object) === Object.prototype;\n}\nvar INACCESSIBLE_OBJECT = {\n  __init: function __init() {\n    'worklet';\n\n    return new Proxy({}, {\n      get: function get(_, prop) {\n        if (prop === '_isReanimatedSharedValue' || prop === '__remoteFunction') {\n          return false;\n        }\n        throw new Error(\"[Reanimated] Trying to access property `\" + String(prop) + \"` of an object which cannot be sent to the UI runtime.\");\n      },\n      set: function set() {\n        throw new Error('[Reanimated] Trying to write to an object which cannot be sent to the UI runtime.');\n      }\n    });\n  }\n};\nvar VALID_ARRAY_VIEWS_NAMES = ['Int8Array', 'Uint8Array', 'Uint8ClampedArray', 'Int16Array', 'Uint16Array', 'Int32Array', 'Uint32Array', 'Float32Array', 'Float64Array', 'BigInt64Array', 'BigUint64Array', 'DataView'];\nvar DETECT_CYCLIC_OBJECT_DEPTH_THRESHOLD = 30;\nvar processedObjectAtThresholdDepth;\nexport function makeShareableCloneRecursive(value) {\n  var shouldPersistRemote = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  if (SHOULD_BE_USE_WEB) {\n    return value;\n  }\n  if (depth >= DETECT_CYCLIC_OBJECT_DEPTH_THRESHOLD) {\n    if (depth === DETECT_CYCLIC_OBJECT_DEPTH_THRESHOLD) {\n      processedObjectAtThresholdDepth = value;\n    } else if (value === processedObjectAtThresholdDepth) {\n      throw new Error('[Reanimated] Trying to convert a cyclic object to a shareable. This is not supported.');\n    }\n  } else {\n    processedObjectAtThresholdDepth = undefined;\n  }\n  var type = typeof value;\n  var isTypeObject = type === 'object';\n  var isTypeFunction = type === 'function';\n  if ((isTypeObject || isTypeFunction) && value !== null) {\n    var cached = shareableMappingCache.get(value);\n    if (cached === shareableMappingFlag) {\n      return value;\n    } else if (cached !== undefined) {\n      return cached;\n    } else {\n      var toAdapt;\n      if (Array.isArray(value)) {\n        toAdapt = value.map(function (element) {\n          return makeShareableCloneRecursive(element, shouldPersistRemote, depth + 1);\n        });\n      } else if (isTypeFunction && !isWorkletFunction(value)) {\n        toAdapt = value;\n      } else if (isHostObject(value)) {\n        toAdapt = value;\n      } else if (isPlainJSObject(value) || isTypeFunction) {\n        toAdapt = {};\n        if (isWorkletFunction(value)) {\n          if (__DEV__) {\n            var babelVersion = value.__initData.version;\n            if (babelVersion !== undefined && babelVersion !== jsVersion) {\n              throw new Error(\"[Reanimated] Mismatch between JavaScript code version and Reanimated Babel plugin version (\" + jsVersion + \" vs. \" + babelVersion + \").        \\nSee `https://docs.swmansion.com/react-native-reanimated/docs/guides/troubleshooting#mismatch-between-javascript-code-version-and-reanimated-babel-plugin-version` for more details.\\nOffending code was: `\" + getWorkletCode(value) + \"`\");\n            }\n            registerWorkletStackDetails(value.__workletHash, value.__stackDetails);\n          }\n          if (value.__stackDetails) {\n            delete value.__stackDetails;\n          }\n          toAdapt.__initData = makeShareableCloneRecursive(value.__initData, true, depth + 1);\n        }\n        for (var _i = 0, _Object$entries = Object.entries(value); _i < _Object$entries.length; _i++) {\n          var _ref = _Object$entries[_i];\n          var _ref2 = _slicedToArray(_ref, 2);\n          var key = _ref2[0];\n          var element = _ref2[1];\n          if (key === '__initData' && toAdapt.__initData !== undefined) {\n            continue;\n          }\n          toAdapt[key] = makeShareableCloneRecursive(element, shouldPersistRemote, depth + 1);\n        }\n      } else if (value instanceof RegExp) {\n        var pattern = value.source;\n        var flags = value.flags;\n        var handle = makeShareableCloneRecursive({\n          __init: function __init() {\n            'worklet';\n\n            return new RegExp(pattern, flags);\n          }\n        });\n        shareableMappingCache.set(value, handle);\n        return handle;\n      } else if (value instanceof Error) {\n        var name = value.name,\n          message = value.message,\n          stack = value.stack;\n        var _handle = makeShareableCloneRecursive({\n          __init: function __init() {\n            'worklet';\n\n            var error = new Error();\n            error.name = name;\n            error.message = message;\n            error.stack = stack;\n            return error;\n          }\n        });\n        shareableMappingCache.set(value, _handle);\n        return _handle;\n      } else if (value instanceof ArrayBuffer) {\n        toAdapt = value;\n      } else if (ArrayBuffer.isView(value)) {\n        var buffer = value.buffer;\n        var typeName = value.constructor.name;\n        var _handle2 = makeShareableCloneRecursive({\n          __init: function __init() {\n            'worklet';\n\n            if (!VALID_ARRAY_VIEWS_NAMES.includes(typeName)) {\n              throw new Error(\"[Reanimated] Invalid array view name `\" + typeName + \"`.\");\n            }\n            var constructor = global[typeName];\n            if (constructor === undefined) {\n              throw new Error(\"[Reanimated] Constructor for `\" + typeName + \"` not found.\");\n            }\n            return new constructor(buffer);\n          }\n        });\n        shareableMappingCache.set(value, _handle2);\n        return _handle2;\n      } else {\n        var inaccessibleObject = makeShareableCloneRecursive(INACCESSIBLE_OBJECT);\n        shareableMappingCache.set(value, inaccessibleObject);\n        return inaccessibleObject;\n      }\n      if (__DEV__) {\n        Object.freeze(value);\n      }\n      var adopted = NativeReanimatedModule.makeShareableClone(toAdapt, shouldPersistRemote, value);\n      shareableMappingCache.set(value, adopted);\n      shareableMappingCache.set(adopted);\n      return adopted;\n    }\n  }\n  return NativeReanimatedModule.makeShareableClone(value, shouldPersistRemote, undefined);\n}\nvar WORKLET_CODE_THRESHOLD = 255;\nfunction getWorkletCode(value) {\n  var _value$__initData;\n  var code = value === null || value === void 0 || (_value$__initData = value.__initData) === null || _value$__initData === void 0 ? void 0 : _value$__initData.code;\n  if (!code) {\n    return 'unknown';\n  }\n  if (code.length > WORKLET_CODE_THRESHOLD) {\n    return code.substring(0, WORKLET_CODE_THRESHOLD) + \"...\";\n  }\n  return code;\n}\nfunction isRemoteFunction(value) {\n  'worklet';\n\n  return !!value.__remoteFunction;\n}\nexport function makeShareableCloneOnUIRecursive(value) {\n  'worklet';\n\n  if (SHOULD_BE_USE_WEB) {\n    return value;\n  }\n  function cloneRecursive(value) {\n    if (typeof value === 'object' && value !== null || typeof value === 'function') {\n      if (isHostObject(value)) {\n        return global._makeShareableClone(value, undefined);\n      }\n      if (isRemoteFunction(value)) {\n        return value.__remoteFunction;\n      }\n      if (Array.isArray(value)) {\n        return global._makeShareableClone(value.map(cloneRecursive), undefined);\n      }\n      var toAdapt = {};\n      for (var _i2 = 0, _Object$entries2 = Object.entries(value); _i2 < _Object$entries2.length; _i2++) {\n        var _ref3 = _Object$entries2[_i2];\n        var _ref4 = _slicedToArray(_ref3, 2);\n        var key = _ref4[0];\n        var element = _ref4[1];\n        toAdapt[key] = cloneRecursive(element);\n      }\n      return global._makeShareableClone(toAdapt, value);\n    }\n    return global._makeShareableClone(value, undefined);\n  }\n  return cloneRecursive(value);\n}\nfunction makeShareableJS(value) {\n  return value;\n}\nfunction makeShareableNative(value) {\n  if (shareableMappingCache.get(value)) {\n    return value;\n  }\n  var handle = makeShareableCloneRecursive({\n    __init: function __init() {\n      'worklet';\n\n      return value;\n    }\n  });\n  shareableMappingCache.set(value, handle);\n  return value;\n}\nexport var makeShareable = SHOULD_BE_USE_WEB ? makeShareableJS : makeShareableNative;","map":{"version":3,"names":["_slicedToArray","NativeReanimatedModule","isWorkletFunction","shouldBeUseWeb","registerWorkletStackDetails","jsVersion","shareableMappingCache","shareableMappingFlag","SHOULD_BE_USE_WEB","MAGIC_KEY","isHostObject","value","isPlainJSObject","object","Object","getPrototypeOf","prototype","INACCESSIBLE_OBJECT","__init","Proxy","get","_","prop","Error","String","set","VALID_ARRAY_VIEWS_NAMES","DETECT_CYCLIC_OBJECT_DEPTH_THRESHOLD","processedObjectAtThresholdDepth","makeShareableCloneRecursive","shouldPersistRemote","arguments","length","undefined","depth","type","isTypeObject","isTypeFunction","cached","toAdapt","Array","isArray","map","element","__DEV__","babelVersion","__initData","version","getWorkletCode","__workletHash","__stackDetails","_i","_Object$entries","entries","_ref","_ref2","key","RegExp","pattern","source","flags","handle","name","message","stack","error","ArrayBuffer","isView","buffer","typeName","constructor","includes","global","inaccessibleObject","freeze","adopted","makeShareableClone","WORKLET_CODE_THRESHOLD","_value$__initData","code","substring","isRemoteFunction","__remoteFunction","makeShareableCloneOnUIRecursive","cloneRecursive","_makeShareableClone","_i2","_Object$entries2","_ref3","_ref4","makeShareableJS","makeShareableNative","makeShareable"],"sources":["/Users/xd/Desktop/study/react/react-project/StickerSmash/node_modules/react-native-reanimated/lib/module/reanimated2/shareables.ts"],"sourcesContent":["'use strict';\nimport NativeReanimatedModule from './NativeReanimated';\nimport { isWorkletFunction } from './commonTypes';\nimport type {\n  ShareableRef,\n  FlatShareableRef,\n  WorkletFunction,\n} from './commonTypes';\nimport { shouldBeUseWeb } from './PlatformChecker';\nimport { registerWorkletStackDetails } from './errors';\nimport { jsVersion } from './platform-specific/jsVersion';\nimport {\n  shareableMappingCache,\n  shareableMappingFlag,\n} from './shareableMappingCache';\n\n// for web/chrome debugger/jest environments this file provides a stub implementation\n// where no shareable references are used. Instead, the objects themselves are used\n// instead of shareable references, because of the fact that we don't have to deal with\n// runnning the code on separate VMs.\nconst SHOULD_BE_USE_WEB = shouldBeUseWeb();\n\nconst MAGIC_KEY = 'REANIMATED_MAGIC_KEY';\n\nfunction isHostObject(value: NonNullable<object>) {\n  'worklet';\n  // We could use JSI to determine whether an object is a host object, however\n  // the below workaround works well and is way faster than an additional JSI call.\n  // We use the fact that host objects have broken implementation of `hasOwnProperty`\n  // and hence return true for all `in` checks regardless of the key we ask for.\n  return MAGIC_KEY in value;\n}\n\nfunction isPlainJSObject(object: object) {\n  return Object.getPrototypeOf(object) === Object.prototype;\n}\n\n// The below object is used as a replacement for objects that cannot be transferred\n// as shareable values. In makeShareableCloneRecursive we detect if an object is of\n// a plain Object.prototype and only allow such objects to be transferred. This lets\n// us avoid all sorts of react internals from leaking into the UI runtime. To make it\n// possible to catch errors when someone actually tries to access such object on the UI\n// runtime, we use the below Proxy object which is instantiated on the UI runtime and\n// throws whenever someone tries to access its fields.\nconst INACCESSIBLE_OBJECT = {\n  __init: () => {\n    'worklet';\n    return new Proxy(\n      {},\n      {\n        get: (_: unknown, prop: string | symbol) => {\n          if (\n            prop === '_isReanimatedSharedValue' ||\n            prop === '__remoteFunction'\n          ) {\n            // not very happy about this check here, but we need to allow for\n            // \"inaccessible\" objects to be tested with isSharedValue check\n            // as it is being used in the mappers when extracting inputs recursively\n            // as well as with isRemoteFunction when cloning objects recursively.\n            // Apparently we can't check if a key exists there as HostObjects always\n            // return true for such tests, so the only possibility for us is to\n            // actually access that key and see if it is set to true. We therefore\n            // need to allow for this key to be accessed here.\n            return false;\n          }\n          throw new Error(\n            `[Reanimated] Trying to access property \\`${String(\n              prop\n            )}\\` of an object which cannot be sent to the UI runtime.`\n          );\n        },\n        set: () => {\n          throw new Error(\n            '[Reanimated] Trying to write to an object which cannot be sent to the UI runtime.'\n          );\n        },\n      }\n    );\n  },\n};\n\nconst VALID_ARRAY_VIEWS_NAMES = [\n  'Int8Array',\n  'Uint8Array',\n  'Uint8ClampedArray',\n  'Int16Array',\n  'Uint16Array',\n  'Int32Array',\n  'Uint32Array',\n  'Float32Array',\n  'Float64Array',\n  'BigInt64Array',\n  'BigUint64Array',\n  'DataView',\n];\n\nconst DETECT_CYCLIC_OBJECT_DEPTH_THRESHOLD = 30;\n// Below variable stores object that we process in makeShareableCloneRecursive at the specified depth.\n// We use it to check if later on the function reenters with the same object\nlet processedObjectAtThresholdDepth: unknown;\n\nexport function makeShareableCloneRecursive<T>(\n  value: any,\n  shouldPersistRemote = false,\n  depth = 0\n): ShareableRef<T> {\n  if (SHOULD_BE_USE_WEB) {\n    return value;\n  }\n  if (depth >= DETECT_CYCLIC_OBJECT_DEPTH_THRESHOLD) {\n    // if we reach certain recursion depth we suspect that we are dealing with a cyclic object.\n    // this type of objects are not supported and cannot be trasferred as shareable, so we\n    // implement a simple detection mechanism that remembers the value at a given depth and\n    // tests whether we try reenter this method later on with the same value. If that happens\n    // we throw an appropriate error.\n    if (depth === DETECT_CYCLIC_OBJECT_DEPTH_THRESHOLD) {\n      processedObjectAtThresholdDepth = value;\n    } else if (value === processedObjectAtThresholdDepth) {\n      throw new Error(\n        '[Reanimated] Trying to convert a cyclic object to a shareable. This is not supported.'\n      );\n    }\n  } else {\n    processedObjectAtThresholdDepth = undefined;\n  }\n  // This one actually may be worth to be moved to c++, we also need similar logic to run on the UI thread\n  const type = typeof value;\n  const isTypeObject = type === 'object';\n  const isTypeFunction = type === 'function';\n  if ((isTypeObject || isTypeFunction) && value !== null) {\n    const cached = shareableMappingCache.get(value);\n    if (cached === shareableMappingFlag) {\n      return value;\n    } else if (cached !== undefined) {\n      return cached as ShareableRef<T>;\n    } else {\n      let toAdapt: any;\n      if (Array.isArray(value)) {\n        toAdapt = value.map((element) =>\n          makeShareableCloneRecursive(element, shouldPersistRemote, depth + 1)\n        );\n      } else if (isTypeFunction && !isWorkletFunction(value)) {\n        // this is a remote function\n        toAdapt = value;\n      } else if (isHostObject(value)) {\n        // for host objects we pass the reference to the object as shareable and\n        // then recreate new host object wrapping the same instance on the UI thread.\n        // there is no point of iterating over keys as we do for regular objects.\n        toAdapt = value;\n      } else if (isPlainJSObject(value) || isTypeFunction) {\n        toAdapt = {};\n        if (isWorkletFunction(value)) {\n          if (__DEV__) {\n            const babelVersion = value.__initData.version;\n            if (babelVersion !== undefined && babelVersion !== jsVersion) {\n              throw new Error(`[Reanimated] Mismatch between JavaScript code version and Reanimated Babel plugin version (${jsVersion} vs. ${babelVersion}).        \nSee \\`https://docs.swmansion.com/react-native-reanimated/docs/guides/troubleshooting#mismatch-between-javascript-code-version-and-reanimated-babel-plugin-version\\` for more details.\nOffending code was: \\`${getWorkletCode(value)}\\``);\n            }\n            registerWorkletStackDetails(\n              value.__workletHash,\n              value.__stackDetails!\n            );\n          }\n          if (value.__stackDetails) {\n            // `Error` type of value cannot be copied to the UI thread, so we\n            // remove it after we handled it in dev mode or delete it to ignore it in production mode.\n            // Not removing this would cause an infinite loop in production mode and it just\n            // seems more elegant to handle it this way.\n            delete value.__stackDetails;\n          }\n          // to save on transferring static __initData field of worklet structure\n          // we request shareable value to persist its UI counterpart. This means\n          // that the __initData field that contains long strings represeting the\n          // worklet code, source map, and location, will always be\n          // serialized/deserialized once.\n          toAdapt.__initData = makeShareableCloneRecursive(\n            value.__initData,\n            true,\n            depth + 1\n          );\n        }\n\n        for (const [key, element] of Object.entries(value)) {\n          if (key === '__initData' && toAdapt.__initData !== undefined) {\n            continue;\n          }\n          toAdapt[key] = makeShareableCloneRecursive(\n            element,\n            shouldPersistRemote,\n            depth + 1\n          );\n        }\n      } else if (value instanceof RegExp) {\n        const pattern = value.source;\n        const flags = value.flags;\n        const handle = makeShareableCloneRecursive({\n          __init: () => {\n            'worklet';\n            return new RegExp(pattern, flags);\n          },\n        });\n        shareableMappingCache.set(value, handle);\n        return handle as ShareableRef<T>;\n      } else if (value instanceof Error) {\n        const { name, message, stack } = value;\n        const handle = makeShareableCloneRecursive({\n          __init: () => {\n            'worklet';\n            const error = new Error();\n            error.name = name;\n            error.message = message;\n            error.stack = stack;\n            return error;\n          },\n        });\n        shareableMappingCache.set(value, handle);\n        return handle as ShareableRef<T>;\n      } else if (value instanceof ArrayBuffer) {\n        toAdapt = value;\n      } else if (ArrayBuffer.isView(value)) {\n        // typed array (e.g. Int32Array, Uint8ClampedArray) or DataView\n        const buffer = value.buffer;\n        const typeName = value.constructor.name;\n        const handle = makeShareableCloneRecursive({\n          __init: () => {\n            'worklet';\n            if (!VALID_ARRAY_VIEWS_NAMES.includes(typeName)) {\n              throw new Error(\n                `[Reanimated] Invalid array view name \\`${typeName}\\`.`\n              );\n            }\n            const constructor = global[typeName as keyof typeof global];\n            if (constructor === undefined) {\n              throw new Error(\n                `[Reanimated] Constructor for \\`${typeName}\\` not found.`\n              );\n            }\n            return new constructor(buffer);\n          },\n        });\n        shareableMappingCache.set(value, handle);\n        return handle as ShareableRef<T>;\n      } else {\n        // This is reached for object types that are not of plain Object.prototype.\n        // We don't support such objects from being transferred as shareables to\n        // the UI runtime and hence we replace them with \"inaccessible object\"\n        // which is implemented as a Proxy object that throws on any attempt\n        // of accessing its fields. We argue that such objects can sometimes leak\n        // as attributes of objects being captured by worklets but should never\n        // be used on the UI runtime regardless. If they are being accessed, the user\n        // will get an appropriate error message.\n        const inaccessibleObject =\n          makeShareableCloneRecursive<T>(INACCESSIBLE_OBJECT);\n        shareableMappingCache.set(value, inaccessibleObject);\n        return inaccessibleObject;\n      }\n      if (__DEV__) {\n        // we freeze objects that are transformed to shareable. This should help\n        // detect issues when someone modifies data after it's been converted to\n        // shareable. Meaning that they may be doing a faulty assumption in their\n        // code expecting that the updates are going to automatically populate to\n        // the object sent to the UI thread. If the user really wants some objects\n        // to be mutable they should use shared values instead.\n        Object.freeze(value);\n      }\n      const adopted = NativeReanimatedModule.makeShareableClone(\n        toAdapt,\n        shouldPersistRemote,\n        value\n      );\n      shareableMappingCache.set(value, adopted);\n      shareableMappingCache.set(adopted);\n      return adopted;\n    }\n  }\n  return NativeReanimatedModule.makeShareableClone(\n    value,\n    shouldPersistRemote,\n    undefined\n  );\n}\n\nconst WORKLET_CODE_THRESHOLD = 255;\n\nfunction getWorkletCode(value: WorkletFunction) {\n  // @ts-ignore this is fine\n  const code = value?.__initData?.code;\n  if (!code) {\n    return 'unknown';\n  }\n  if (code.length > WORKLET_CODE_THRESHOLD) {\n    return `${code.substring(0, WORKLET_CODE_THRESHOLD)}...`;\n  }\n  return code;\n}\n\ntype RemoteFunction<T> = {\n  __remoteFunction: FlatShareableRef<T>;\n};\n\nfunction isRemoteFunction<T>(value: {\n  __remoteFunction?: unknown;\n}): value is RemoteFunction<T> {\n  'worklet';\n  return !!value.__remoteFunction;\n}\n\nexport function makeShareableCloneOnUIRecursive<T>(\n  value: T\n): FlatShareableRef<T> {\n  'worklet';\n  if (SHOULD_BE_USE_WEB) {\n    // @ts-ignore web is an interesting place where we don't run a secondary VM on the UI thread\n    // see more details in the comment where USE_STUB_IMPLEMENTATION is defined.\n    return value;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  function cloneRecursive(value: T): FlatShareableRef<T> {\n    if (\n      (typeof value === 'object' && value !== null) ||\n      typeof value === 'function'\n    ) {\n      if (isHostObject(value)) {\n        // We call `_makeShareableClone` to wrap the provided HostObject\n        // inside ShareableJSRef.\n        return global._makeShareableClone(\n          value,\n          undefined\n        ) as FlatShareableRef<T>;\n      }\n      if (isRemoteFunction<T>(value)) {\n        // RemoteFunctions are created by us therefore they are\n        // a Shareable out of the box and there is no need to\n        // call `_makeShareableClone`.\n        return value.__remoteFunction;\n      }\n      if (Array.isArray(value)) {\n        return global._makeShareableClone(\n          value.map(cloneRecursive),\n          undefined\n        ) as FlatShareableRef<T>;\n      }\n      const toAdapt: Record<string, FlatShareableRef<T>> = {};\n      for (const [key, element] of Object.entries(value)) {\n        toAdapt[key] = cloneRecursive(element);\n      }\n      return global._makeShareableClone(toAdapt, value) as FlatShareableRef<T>;\n    }\n    return global._makeShareableClone(value, undefined);\n  }\n  return cloneRecursive(value);\n}\n\nfunction makeShareableJS<T extends object>(value: T): T {\n  return value;\n}\n\nfunction makeShareableNative<T extends object>(value: T): T {\n  if (shareableMappingCache.get(value)) {\n    return value;\n  }\n  const handle = makeShareableCloneRecursive({\n    __init: () => {\n      'worklet';\n      return value;\n    },\n  });\n  shareableMappingCache.set(value, handle);\n  return value;\n}\n\n/**\n * This function creates a value on UI with persistent state - changes to it on the UI\n * thread will be seen by all worklets. Use it when you want to create a value\n * that is read and written only on the UI thread.\n */\nexport const makeShareable = SHOULD_BE_USE_WEB\n  ? makeShareableJS\n  : makeShareableNative;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}